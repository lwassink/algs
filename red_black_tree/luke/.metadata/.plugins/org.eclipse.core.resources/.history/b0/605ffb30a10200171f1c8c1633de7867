public class AVLTree<Key extends Comparable<Key>, Value> {
	private Node root;
	private static final boolean RED = true;
	private static final boolean BLACK = false;

	private class Node {
		private Key key;
		private Value val;
		private int size;
		private Node left, right;
		private boolean color;

		public Node(Key key, Value val, int size) {
			this.key = key;
			this.val = val;
			this.size = size;
			this.color = BLACK;
		}
	}

	public AVLTree() {
		root = null;
	}

	public int size() {
		return size(root);
	}

	public int size(Node node) {
		if (node == null) return 0;
		return node.size;
	}

	public int height() {
		return height(root);
	}

	private int height(Node node) {
		if (node == null) return -1;
		return node.height;
	}

	private int balance(Node node) {
		return height(node.right) - height(node.left);
	}

	public Value get(Key k) {
		return get(root, k);
	}

	private Value get(Node node, Key k) {
		if (node == null) return null;
		int cmp = k.compareTo(node.key);
		if (cmp < 0)     	return get(node.left, k);
		else if (cmp > 0)	return get(node.right, k);
		else             	return node.val;
	}

	public void put(Key k, Value v) {
		root = put(root, k, v);
	}

	private Node put(Node node, Key k, Value v) {
		if (node == null) return new Node(k, v, 1);
		int cmp = k.compareTo(node.key);

		if (cmp < 0) node.left = put(node.left, k, v);
		else if (cmp > 0) node.right = put(node.right, k, v);
		else node.val = v;

		node = rebalance(node);

		node.size = size(node.left) + size(node.right) + 1;
		node.height = Math.max(height(node.left), height(node.right)) + 1;
		return node;
	}

	public Iterable<Key> inOrder() {
		Queue<Key> queue = new Queue<Key>();
		inOrder(root, queue);
		return queue;
	}

	private void inOrder(Node x, Queue<Key> queue) {
		if (x == null) return;
		inOrder(x.left, queue);
		queue.enqueue(x.key);
		inOrder(x.right, queue);
	}

	private Node rebalance(Node node) {
		if (balance(node) < -1) {
			if (balance(node.left) > 0) node.left = rotateLeft(node.left);
			node = rotateRight(node);
		}
		if (balance(node) > 1) {
			if (balance(node.right) > 0) node.right = rotateLeft(node.right);
			node =  rotateLeft(node);
		}
		return node;
	}

	private Node rotateLeft(Node x) {
		if (x.right == null) return x;
		Node right = x.right;
		x.right = right.left;
		right.left = x;
		return right;
	}

	private Node rotateRight(Node x) {
		if (x.left == null) return x;
		Node left = x.left;
		x.left = left.right;
		left.right = x;
		return left;
	}

	public static void main(String[] args) {
		AVLTree<Integer, String> test = new AVLTree<Integer, String>();
		test.put(5, "good");
		System.out.println(test.height());
		test.put(1, "Hi");
		System.out.println(test.height());
		test.put(2, "there");
		System.out.println(test.height());
		test.put(7, "friend");
		System.out.println(test.height());
		test.put(3, "my");
		System.out.println(test.height());
		test.put(4, "very");
		System.out.println(test.height());
//		System.out.println(test.get(3));
//		System.out.println(test.get(1));
//		System.out.println(test.get(5));
		for (int key : test.inOrder()) {
//			System.out.println(key);
			System.out.println(test.get(key));
		}
		System.out.println(test.isBST());
		System.out.println(test.height());
	}

	public boolean isBST() {
		return isBST(root, null, null);
	}

	private boolean isBST(Node x, Key min, Key max) {
		if (x == null) return true;
		if (min != null && x.key.compareTo(min) <= 0) return false;
		if (max != null && x.key.compareTo(max) >= 0) return false;
		return isBST(x.left, min, x.key) && isBST(x.right, x.key, max);
	}
}